knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(swirl)
swirl()
install.packages(c("broom", "cubature", "data.table", "devtools", "fs", "htmlTable", "httr", "pillar", "pkgbuild", "processx", "Rcpp", "remotes", "rlang", "sys", "tibble", "tinytex", "vctrs", "xfun"))
?sample
sample(1:5)
library(datasets)
mydata <- mtcars
View(mydata)
library(dplyr)
filter(mydata$disp, desc())
arrange(mydata$disp, desc())
arrange_(mydata$disp, desc())
arrange(mydata$disp, desc())
arrange(mydata$disp, desc())
arrange(mydata$hp, desc())
library(swirl)
swirl()
read.csv(path2csv, stringsAsFactors =  FALSE)
mydf <- read.csv(path2csv, stringsAsFactors =  FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
avg_bytes <- summarise(cran, avg_bytes = mean(size))
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package ,mean(size))
submit()
?n
View(pack_sum)
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
skip()
submit()
skip()
submit()
submit()
install.packages("swirl")
library("dplyr", lib.loc="D:/R-3.6.3/library")
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
install_course(Getting_and_Cleaning_Data)
install_course("Getting_and_Cleaning_Data")
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, -grade)
gather(students, -"grade")
gather(students, value = -grade)
skip()
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count, grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
submit()
skip()
?spread
submit()
skip()
library(readr)
parse_number("class5")
# We want the values in the class columns to be
submit()
submit()
skip()
students4
skip()
View(student_info)
skip()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
skip()
submit()
install.packages(c("backports", "data.table", "tibble", "xfun"))
install.packages(c("backports", "data.table", "xfun"))
library(datasets)
mydata <- lynx
plot(mydata)
hist((mydata))
hist(mydata)
date = Sys.Date()
date
time = Sys.time()
?date
library(lubridate)
install.packages("lubridate")
library(lubridate)
mydate <- dmy(3151998)
mydate <- dmy(31051998)
mydate
mydate <- mdy(09111998)
mydate
?Sys.timezone
Sys.timezone()
Sys.timezone(UTC)
Sys.timezone(GMT 5:00)
Sys.timezone(Tz = UTC)
browseVignettes("lubridate")
Sys.timezone(Tz = "UTC")
Sys.timezone(tz = "UTC")
setTimeLimit()
setTimeLimit(2)
library(swirl)
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
?lubridate
help(package = lubridate
)
this_day <- today()
this_day
?Theoph
year(this_day)
wday(this_day)
wday(this_day, label = True)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("\\192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 11, minutes = 21)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive = depart + hours(15) + minutes(50)
with_tz("Hong Kong")
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("C:/Users/shubham/Desktop/UCI HAR Dataset")
# Load Test datasets
x_test <- read.table("C:/Users/shubham/Desktop/UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("C:/Users/shubham/Desktop/UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("C:/Users/shubham/Desktop/UCI HAR Dataset/test/subject_test.txt")
# Load Train datasets
x_train <- read.table("C:/Users/shubham/Desktop/UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("C:/Users/shubham/Desktop/UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("C:/Users/shubham/Desktop/UCI HAR Dataset/train/subject_train.txt")
# Read data description
variable_names <- read.table("C:/Users/shubham/Desktop/UCI HAR Dataset/features.txt")
# Read activity labels
activity_labels <- read.table("C:/Users/shubham/Desktop/UCI HAR Dataset/activity_labels.txt")
# Merging
X_combine <- rbind(x_test, x_train)
y_combine <- rbind(y_test, y_train)
sub_combine <- rbind(subject_test, subject_train)
# 2) Extract mean and sd for each measurement
selected_var <- variable_names[grep("mean\\(\\)|std\\(\\)",variable_names[,2]),]
X_total <- X_total[,selected_var[,1]]
X_combine <- X_combine[,selected_var[,1]]
X_combine
View(variable_names)
View(activity_labels)
# 3) Use descriptive activity names to name the activities in the data set
colnames(y_combine) <- "activity"
y_combine$activitylabel <- factor(y_combine$activity, labels = as.character(activity_labels[,2]))
activitylabel <- y_combine[,-1]
# 4) Label the dataset with descriptive variable name
colnames(X_combine) <- variable_names[selected_var[,1],2]
# 5. From the data set in step 4, create a second, independent tidy data set with the average
# of each variable for each activity and each subject.
colnames(sub_combine) <- "subject"
total <- cbind(X_combine, activitylabel, sub_combine)
total_mean <- total %>% group_by(activitylabel, subject) %>% summarize_each(funs(mean))
library(dplyr)
total_mean <- total %>% group_by(activitylabel, subject) %>% summarize_each(funs(mean))
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
write.file(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
write.table(total_mean, file = "C:/Users/shubham/Desktop/UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
